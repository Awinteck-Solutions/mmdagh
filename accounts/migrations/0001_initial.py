# Generated by Django 5.1.6 on 2025-04-07 19:07

import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MMDA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('abbreviation', models.CharField(max_length=100, unique=True)),
                ('gps_address', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('contact_1', models.CharField(max_length=20)),
                ('contact_2', models.CharField(blank=True, max_length=10, null=True)),
                ('email', models.CharField(max_length=30)),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('postal_address', models.CharField(max_length=100)),
                ('logo_1', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('local_govt_logo', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('coat_of_arms', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Greater Accra', 'Greater Accra'), ('Ashanti', 'Ashanti'), ('Western', 'Western'), ('Central', 'Central'), ('Eastern', 'Eastern'), ('Northern', 'Northern'), ('Upper East', 'Upper East'), ('Upper West', 'Upper West'), ('Volta', 'Volta'), ('Oti', 'Oti'), ('Western North', 'Western North'), ('Bono', 'Bono'), ('Bono East', 'Bono East'), ('Ahafo', 'Ahafo'), ('Savannah', 'Savannah'), ('North East', 'North East')], max_length=50)),
                ('code', models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='DataCapture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('category', models.CharField(default='INDV', editable=False, max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('ghana_card', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Ghana Card should follow the format: GHA-XXXXXXXXXX-X where X is optional.', regex='^GHA-\\d{10}-\\d*$')])),
                ('first_name', models.CharField(max_length=50)),
                ('surname', models.CharField(max_length=50)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10)),
                ('date_of_birth', models.DateField()),
                ('contact_1', models.CharField(max_length=20)),
                ('contact_2', models.CharField(blank=True, max_length=10, null=True)),
                ('home_town', models.CharField(max_length=50)),
                ('home_region', models.CharField(choices=[('Greater Accra', 'Greater Accra'), ('Ashanti', 'Ashanti'), ('Western', 'Western'), ('Central', 'Central'), ('Eastern', 'Eastern'), ('Northern', 'Northern'), ('Upper East', 'Upper East'), ('Upper West', 'Upper West'), ('Volta', 'Volta'), ('Oti', 'Oti'), ('Western North', 'Western North'), ('Bono', 'Bono'), ('Bono East', 'Bono East'), ('Ahafo', 'Ahafo'), ('Savannah', 'Savannah'), ('North East', 'North East')], max_length=50)),
                ('language', models.CharField(choices=[('English', 'English'), ('Twi', 'Twi'), ('Hausa', 'Hausa'), ('Ga', 'Ga'), ('Kusaal', 'Kusaal'), ('Dagomba', 'Dagomba'), ('French', 'French'), ('Fante', 'Fante'), ('Ewe', 'Ewe')], max_length=50)),
                ('spouse_name', models.CharField(max_length=100)),
                ('spouse_contact', models.CharField(max_length=10)),
                ('neighbor_emergency_name', models.CharField(max_length=100)),
                ('neighbor_emergency_contact', models.CharField(max_length=10)),
                ('religion', models.CharField(choices=[('Christian', 'Christian'), ('Muslim', 'Muslim'), ('Traditional', 'Traditional'), ('N/A', 'N/A')], max_length=50)),
                ('email', models.CharField(max_length=30)),
                ('rooms', models.IntegerField(default=1)),
                ('occupation', models.CharField(max_length=50)),
                ('name_of_place_of_work', models.CharField(max_length=50)),
                ('location_of_place_work', models.CharField(max_length=50)),
                ('work_place_contact', models.CharField(max_length=10)),
                ('nature_ownership', models.CharField(choices=[('Govt', 'Govt'), ('Private', 'Private'), ('Govt/Private', 'Govt/Private'), ('Religious', 'Religious')], max_length=100)),
                ('house_number', models.CharField(max_length=50)),
                ('location', models.CharField(max_length=100)),
                ('street_name', models.CharField(max_length=100)),
                ('area_name', models.CharField(max_length=100)),
                ('area_zone', models.CharField(choices=[('Zone_A', 'Zone A'), ('Zone_B', 'Zone B'), ('Zone_C', 'Zone C'), ('Zone_D', 'Zone D'), ('Urban', 'Urban'), ('Rural', 'Rural')], max_length=100)),
                ('gps_address', models.CharField(max_length=100)),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('electricity', models.BooleanField(default=False)),
                ('gwcpl_supply', models.BooleanField(default=False)),
                ('nearest_landmark', models.CharField(max_length=100)),
                ('criminal_activities_1', models.CharField(choices=[('Stealing', 'Stealing'), ('Assault', 'Assault'), ('Fraud', 'Fraud'), ('Theft', 'Theft'), ('Rape & Defilement', 'Rape & Defilement'), ('Robbery', 'Robbery')], max_length=50)),
                ('criminal_activities_2', models.CharField(choices=[('Stealing', 'Stealing'), ('Assault', 'Assault'), ('Fraud', 'Fraud'), ('Theft', 'Theft'), ('Rape & Defilement', 'Rape & Defilement'), ('Robbery', 'Robbery')], max_length=50)),
                ('criminal_activities_3', models.CharField(choices=[('Stealing', 'Stealing'), ('Assault', 'Assault'), ('Fraud', 'Fraud'), ('Theft', 'Theft'), ('Rape & Defilement', 'Rape & Defilement'), ('Robbery', 'Robbery')], max_length=50)),
                ('network_connectivity', models.CharField(choices=[('Strong', 'Strong'), ('Average', 'Average'), ('Weak', 'Weak'), ('No Network', 'No Network')], max_length=20)),
                ('road_network', models.CharField(choices=[('Tired', 'Tired'), ('Non-Tired', 'Non-Tired'), ('No Road', 'No Road')], max_length=20)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('mmda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.mmda')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.region')),
            ],
            options={
                'verbose_name': 'Data Capture',
                'verbose_name_plural': 'Data Captures',
                'ordering': ['date_created'],
            },
        ),
        migrations.AddField(
            model_name='mmda',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mmdas', to='accounts.region'),
        ),
        migrations.CreateModel(
            name='HealthCapture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('category', models.CharField(default='HTH', editable=False, max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('hospital_name', models.CharField(max_length=100)),
                ('hospital_admin', models.CharField(blank=True, max_length=100)),
                ('hospital_admin_contact', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('additional_contacts', models.JSONField(default=list)),
                ('gps_address', models.CharField(max_length=100)),
                ('latitude', models.FloatField(help_text='Latitude must be between -90.0 and 90.0.', validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('longitude', models.FloatField(help_text='Longitude must be between -180.0 and 180.0.', validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('area_zone', models.CharField(choices=[('Zone_A', 'Zone A'), ('Zone_B', 'Zone B'), ('Zone_C', 'Zone C'), ('Zone_D', 'Zone D'), ('Urban', 'Urban'), ('Rural', 'Rural')], max_length=100)),
                ('street_name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('hospital_reg_no', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Invalid registration number format.', regex='^[A-Za-z0-9\\-]+$')])),
                ('ambulance', models.BooleanField(default=False)),
                ('nature_ownership', models.CharField(choices=[('Govt', 'Govt'), ('Private', 'Private'), ('Govt/Private', 'Govt/Private'), ('Religious', 'Religious')], max_length=100)),
                ('emergency_name', models.CharField(max_length=100)),
                ('emergency_contact', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('building_type', models.CharField(choices=[('Single-family home', 'Single-family home'), ('Apartment', 'Apartment'), ('Townhouse', 'Townhouse')], max_length=50)),
                ('number_of_floors', models.PositiveIntegerField()),
                ('number_of_beds', models.PositiveIntegerField()),
                ('toilet_facility', models.CharField(choices=[('In-house', 'In-house'), ('Public toilet', 'Public toilet'), ('Open defication', 'Open defication'), ('Flush', 'Flush'), ('Pit Latrine', 'Pit Latrine')], max_length=50)),
                ('parking_spaces', models.BooleanField(default=False)),
                ('fenced', models.BooleanField(default=False)),
                ('fencing_type', models.CharField(blank=True, choices=[('Wall Fenced', 'Wall Fenced'), ('Hedged', 'Hedged'), ('Non-Fenced', 'Non-Fenced')], max_length=50, null=True)),
                ('building_condition', models.CharField(choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Average', 'Average'), ('Poor', 'Poor')], max_length=50)),
                ('security_features', models.JSONField(default=dict)),
                ('construction_material', models.CharField(choices=[('Concrete/bricks', 'Concrete/bricks'), ('Wood', 'Wood'), ('Metal', 'Metal')], max_length=50)),
                ('type_of_roof', models.CharField(choices=[('Metal Sheet', 'Metal Sheet'), ('Thatched', 'Thatched'), ('Concrete', 'Concrete')], max_length=50)),
                ('water_supply', models.CharField(choices=[('Piped/GWCL', 'Piped/GWCL'), ('Borehole', 'Borehole'), ('Well', 'Well'), ('Borehole', 'Borehole'), ('River', 'River'), ('N/A', 'N/A')], max_length=50)),
                ('gwcpl_supply', models.BooleanField(default=False)),
                ('electricity_connection', models.CharField(choices=[('National Grid', 'National Grid'), ('Solar', 'Solar'), ('N/A', 'N/A')], max_length=50)),
                ('has_backup_generator', models.BooleanField(default=False)),
                ('sewage_system', models.CharField(choices=[('Connected to the sewer', 'Connected to the sewer'), ('Septic tank', 'Septic tank'), ('open drainage', 'open drainage')], max_length=50)),
                ('waste_disposal_method', models.CharField(choices=[('Municipal collection', 'Municipal collection'), ('Burning', 'Burning'), ('Dumping', 'Dumping')], max_length=50)),
                ('internet_connectivity', models.CharField(choices=[('broadband', 'broadband'), ('Mobile', 'Mobile'), ('None', 'None')], max_length=50)),
                ('proximity_to_public_infrastructure', models.CharField(choices=[('Church', 'Church'), ('Schools', 'Schools'), ('Hospitals', 'Hospitals'), ('Markets', 'Markets')], max_length=50)),
                ('flood_risk_area', models.BooleanField(default=False)),
                ('criminal_activities', models.JSONField(default=list)),
                ('network_connectivity', models.CharField(choices=[('Strong', 'Strong'), ('Average', 'Average'), ('Weak', 'Weak'), ('No Network', 'No Network')], max_length=50)),
                ('road_network', models.BooleanField(default=False)),
                ('road_condition', models.CharField(blank=True, choices=[('Good', 'Good'), ('Fair', 'Fair'), ('Poor', 'Poor'), ('Paved', 'Paved'), ('Gravel', 'Gravel')], help_text='If road network exists, specify the condition of the road.', max_length=50, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('hospital_admin_ghana_card', models.OneToOneField(help_text='Select a valid Ghana Card entry.', on_delete=django.db.models.deletion.CASCADE, related_name='health_capture', to='accounts.datacapture', to_field='ghana_card')),
                ('mmda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.mmda')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.region')),
            ],
            options={
                'verbose_name': 'Health Capture',
                'verbose_name_plural': 'Health Captures',
                'ordering': ['-date_created', 'hospital_name'],
            },
        ),
        migrations.CreateModel(
            name='GovernmentCapture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('category', models.CharField(default='GOV', editable=False, max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('institutional_name', models.CharField(max_length=100)),
                ('institutional_contact', models.CharField(blank=True, max_length=100)),
                ('institutional_admin', models.CharField(blank=True, max_length=100)),
                ('institutional_admin_contact', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('additional_contacts', models.JSONField(default=list)),
                ('gps_address', models.CharField(max_length=100)),
                ('latitude', models.FloatField(help_text='Latitude must be between -90.0 and 90.0.', validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('longitude', models.FloatField(help_text='Longitude must be between -180.0 and 180.0.', validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('area_zone', models.CharField(choices=[('Zone_A', 'Zone A'), ('Zone_B', 'Zone B'), ('Zone_C', 'Zone C'), ('Zone_D', 'Zone D'), ('Urban', 'Urban'), ('Rural', 'Rural')], max_length=100)),
                ('street_name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('registration_no', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Invalid registration number format.', regex='^[A-Za-z0-9\\-]+$')])),
                ('nature_ownership', models.CharField(choices=[('Govt', 'Govt'), ('Private', 'Private'), ('Govt/Private', 'Govt/Private'), ('Religious', 'Religious')], max_length=100)),
                ('service_type', models.CharField(choices=[('Security', 'Security'), ('Financial', 'Financial'), ('Accountancy', 'Accountancy'), ('Education', 'Education'), ('MMDA', 'MMDA'), ('Agri', 'Agri'), ('Consultancy', 'Consultancy'), ('Trading', 'Trading'), ('Other', 'Other')], max_length=100)),
                ('emergency_name', models.CharField(max_length=100)),
                ('emergency_contact', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('building_type', models.CharField(choices=[('Single-family home', 'Single-family home'), ('Apartment', 'Apartment'), ('Townhouse', 'Townhouse')], max_length=50)),
                ('number_of_floors', models.PositiveIntegerField()),
                ('toilet_facility', models.CharField(choices=[('In-house', 'In-house'), ('Public toilet', 'Public toilet'), ('Open defication', 'Open defication'), ('Flush', 'Flush'), ('Pit Latrine', 'Pit Latrine')], max_length=50)),
                ('parking_spaces', models.BooleanField(default=False)),
                ('fenced', models.BooleanField(default=False)),
                ('fencing_type', models.CharField(blank=True, choices=[('Wall Fenced', 'Wall Fenced'), ('Hedged', 'Hedged'), ('Non-Fenced', 'Non-Fenced')], max_length=50, null=True)),
                ('building_condition', models.CharField(choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Average', 'Average'), ('Poor', 'Poor')], max_length=50)),
                ('security_features', models.JSONField(default=dict)),
                ('construction_material', models.CharField(choices=[('Concrete/bricks', 'Concrete/bricks'), ('Wood', 'Wood'), ('Metal', 'Metal')], max_length=50)),
                ('type_of_roof', models.CharField(choices=[('Metal Sheet', 'Metal Sheet'), ('Thatched', 'Thatched'), ('Concrete', 'Concrete')], max_length=50)),
                ('water_supply', models.CharField(choices=[('Piped/GWCL', 'Piped/GWCL'), ('Borehole', 'Borehole'), ('Well', 'Well'), ('Borehole', 'Borehole'), ('River', 'River'), ('N/A', 'N/A')], max_length=50)),
                ('gwcpl_supply', models.BooleanField(default=False)),
                ('electricity_connection', models.CharField(choices=[('National Grid', 'National Grid'), ('Solar', 'Solar'), ('N/A', 'N/A')], max_length=50)),
                ('has_backup_generator', models.BooleanField(default=False)),
                ('sewage_system', models.CharField(choices=[('Connected to the sewer', 'Connected to the sewer'), ('Septic tank', 'Septic tank'), ('open drainage', 'open drainage')], max_length=50)),
                ('waste_disposal_method', models.CharField(choices=[('Municipal collection', 'Municipal collection'), ('Burning', 'Burning'), ('Dumping', 'Dumping')], max_length=50)),
                ('internet_connectivity', models.CharField(choices=[('broadband', 'broadband'), ('Mobile', 'Mobile'), ('None', 'None')], max_length=50)),
                ('proximity_to_public_infrastructure', models.CharField(choices=[('Church', 'Church'), ('Schools', 'Schools'), ('Hospitals', 'Hospitals'), ('Markets', 'Markets')], max_length=50)),
                ('flood_risk_area', models.BooleanField(default=False)),
                ('criminal_activities', models.JSONField(default=list)),
                ('network_connectivity', models.CharField(choices=[('Strong', 'Strong'), ('Average', 'Average'), ('Weak', 'Weak'), ('No Network', 'No Network')], max_length=50)),
                ('road_network', models.BooleanField(default=False)),
                ('road_condition', models.CharField(blank=True, choices=[('Good', 'Good'), ('Fair', 'Fair'), ('Poor', 'Poor'), ('Paved', 'Paved'), ('Gravel', 'Gravel')], help_text='If road network exists, specify the condition of the road.', max_length=50, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('institutional_admin_ghana_card', models.OneToOneField(help_text='Select a valid Ghana Card entry.', on_delete=django.db.models.deletion.CASCADE, related_name='government_capture', to='accounts.datacapture', to_field='ghana_card')),
                ('mmda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.mmda')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.region')),
            ],
            options={
                'verbose_name': 'Government Capture',
                'verbose_name_plural': 'Government Captures',
                'ordering': ['-date_created', 'institutional_name'],
            },
        ),
        migrations.CreateModel(
            name='EducationCapture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('category', models.CharField(default='EDU', editable=False, max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('school_name', models.CharField(max_length=100)),
                ('school_type', models.CharField(choices=[('Private School', 'Private School'), ('Government School', 'Government School')], max_length=20)),
                ('school_role', models.CharField(choices=[('HeadMaster/Principal', 'HeadMaster/Principal'), ('Owner', 'Owner'), ('Teacher', 'Teacher'), ('Key_Contact', 'Key_Contact')], max_length=20)),
                ('school_type1', models.CharField(choices=[('Crech_or_ Montesori ', 'Crech_or_ Montesori'), ('Primary only,', 'Primary only'), ('J.H.S only', 'J.H.S only,'), ('S.H.S only', 'S.H.S only,'), ('University', 'University'), ('Crech,Primary,', 'Crech,Primary'), ('Crech,Primary,J.H.S', 'Crech,Primary,J.H.S'), ('Crech,Primary,J.H.S,S.H.S', 'Crech,Primary,J.H.S,S.H.S'), ('Crech,Primary,J.H.S,S.H.S,University', 'Crech,Primary,J.H.S,S.H.S,University'), ('Remedial', 'Remedial')], max_length=100)),
                ('ges_approved', models.BooleanField(help_text='Select whether the facility is Ghana Education Service Approved.', max_length=100)),
                ('boarding_facility', models.CharField(choices=[('day_only', 'Day Only'), ('day_boarding', 'Day & Boarding')], default='day_only', help_text='Select whether the facility is for Day only or Day & Boarding.', max_length=20)),
                ('school_contact', models.CharField(blank=True, max_length=100)),
                ('school_admin', models.CharField(blank=True, max_length=100)),
                ('school_admin_contact', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('additional_contacts', models.JSONField(default=list)),
                ('gps_address', models.CharField(max_length=100)),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('area_zone', models.CharField(choices=[('Zone_A', 'Zone A'), ('Zone_B', 'Zone B'), ('Zone_C', 'Zone C'), ('Zone_D', 'Zone D'), ('Urban', 'Urban'), ('Rural', 'Rural')], max_length=100)),
                ('street_name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('school_registered', models.BooleanField(default=False)),
                ('registration_no', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(regex='^[A-Za-z0-9\\-]+$')])),
                ('nature_ownership', models.CharField(choices=[('Govt', 'Govt'), ('Private', 'Private'), ('Govt/Private', 'Govt/Private'), ('Religious', 'Religious')], max_length=100)),
                ('service_type', models.CharField(choices=[('Security', 'Security'), ('Financial', 'Financial'), ('Accountancy', 'Accountancy'), ('Education', 'Education'), ('MMDA', 'MMDA'), ('Agri', 'Agri'), ('Consultancy', 'Consultancy'), ('Trading', 'Trading'), ('Other', 'Other')], max_length=100)),
                ('emergency_name', models.CharField(max_length=100)),
                ('emergency_contact', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('school_buses_or_cars', models.BooleanField(default=False)),
                ('building_type', models.CharField(choices=[('Single-family home', 'Single-family home'), ('Apartment', 'Apartment'), ('Townhouse', 'Townhouse')], max_length=50)),
                ('number_of_floors', models.PositiveIntegerField()),
                ('toilet_facility', models.CharField(choices=[('In-house', 'In-house'), ('Public toilet', 'Public toilet'), ('Open defication', 'Open defication'), ('Flush', 'Flush'), ('Pit Latrine', 'Pit Latrine')], max_length=50)),
                ('parking_spaces', models.BooleanField(default=False)),
                ('fenced', models.BooleanField(default=False)),
                ('fencing_type', models.CharField(blank=True, choices=[('Wall Fenced', 'Wall Fenced'), ('Hedged', 'Hedged'), ('Non-Fenced', 'Non-Fenced')], max_length=50, null=True)),
                ('building_condition', models.CharField(choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Average', 'Average'), ('Poor', 'Poor')], max_length=50)),
                ('security_features', models.JSONField(default=list)),
                ('construction_material', models.CharField(choices=[('Concrete/bricks', 'Concrete/bricks'), ('Wood', 'Wood'), ('Metal', 'Metal')], max_length=50)),
                ('type_of_roof', models.CharField(choices=[('Metal Sheet', 'Metal Sheet'), ('Thatched', 'Thatched'), ('Concrete', 'Concrete')], max_length=50)),
                ('water_supply', models.CharField(choices=[('Piped/GWCL', 'Piped/GWCL'), ('Borehole', 'Borehole'), ('Well', 'Well'), ('Borehole', 'Borehole'), ('River', 'River'), ('N/A', 'N/A')], max_length=50)),
                ('gwcpl_supply', models.BooleanField(default=False)),
                ('electricity_connection', models.CharField(choices=[('National Grid', 'National Grid'), ('Solar', 'Solar'), ('N/A', 'N/A')], max_length=50)),
                ('ecg_connection', models.BooleanField(default=False)),
                ('ecg_pole_no', models.CharField(max_length=100)),
                ('has_backup_generator', models.BooleanField(default=False)),
                ('sewage_system', models.CharField(choices=[('Connected to the sewer', 'Connected to the sewer'), ('Septic tank', 'Septic tank'), ('open drainage', 'open drainage')], max_length=50)),
                ('waste_disposal_method', models.CharField(choices=[('Municipal collection', 'Municipal collection'), ('Burning', 'Burning'), ('Dumping', 'Dumping')], max_length=50)),
                ('internet_connectivity', models.CharField(choices=[('broadband', 'broadband'), ('Mobile', 'Mobile'), ('None', 'None')], max_length=50)),
                ('proximity_to_public_infrastructure', models.CharField(choices=[('Church', 'Church'), ('Schools', 'Schools'), ('Hospitals', 'Hospitals'), ('Markets', 'Markets')], max_length=50)),
                ('flood_risk_area', models.BooleanField(default=False)),
                ('criminal_activities_1', models.CharField(choices=[('Stealing', 'Stealing'), ('Assault', 'Assault'), ('Fraud', 'Fraud'), ('Theft', 'Theft'), ('Rape & Defilement', 'Rape & Defilement'), ('Robbery', 'Robbery')], max_length=50)),
                ('criminal_activities_2', models.CharField(choices=[('Stealing', 'Stealing'), ('Assault', 'Assault'), ('Fraud', 'Fraud'), ('Theft', 'Theft'), ('Rape & Defilement', 'Rape & Defilement'), ('Robbery', 'Robbery')], max_length=50)),
                ('criminal_activities_3', models.CharField(choices=[('Stealing', 'Stealing'), ('Assault', 'Assault'), ('Fraud', 'Fraud'), ('Theft', 'Theft'), ('Rape & Defilement', 'Rape & Defilement'), ('Robbery', 'Robbery')], max_length=50)),
                ('network_connectivity', models.CharField(choices=[('Strong', 'Strong'), ('Average', 'Average'), ('Weak', 'Weak'), ('No Network', 'No Network')], max_length=50)),
                ('road_network', models.BooleanField(default=False)),
                ('road_condition', models.CharField(blank=True, choices=[('Good', 'Good'), ('Fair', 'Fair'), ('Poor', 'Poor'), ('Paved', 'Paved'), ('Gravel', 'Gravel')], max_length=50, null=True)),
                ('profile_picture', models.ImageField(blank=True, default='default_profile.jpg', null=True, upload_to='profile_pictures/')),
                ('admin_ghana_card', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='education_capture', to='accounts.datacapture', to_field='ghana_card')),
                ('mmda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.mmda')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.region')),
            ],
            options={
                'verbose_name': 'Education Capture',
                'verbose_name_plural': 'Education Captures',
                'ordering': ['-date_created', 'school_name'],
            },
        ),
        migrations.CreateModel(
            name='ResidentialCapture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('category', models.CharField(default='RES', editable=False, max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('principal_tenant', models.CharField(blank=True, max_length=100)),
                ('principal_tenant_contact', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('number_of_occupants', models.CharField(blank=True, max_length=100)),
                ('building_name', models.CharField(max_length=100)),
                ('house_number', models.CharField(max_length=50)),
                ('gps_address', models.CharField(max_length=100)),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('area_zone', models.CharField(choices=[('Zone_A', 'Zone A'), ('Zone_B', 'Zone B'), ('Zone_C', 'Zone C'), ('Zone_D', 'Zone D'), ('Urban', 'Urban'), ('Rural', 'Rural')], max_length=100)),
                ('street_name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('property_classification', models.CharField(choices=[('Residential', 'Residential'), ('Commercial', 'Commercial'), ('Mixed-use', 'Mixed-use')], max_length=100)),
                ('ownership_status', models.CharField(choices=[('Owner-occupied', 'Owner-occupied'), ('Apartment', 'Apartment'), ('Townhouse', 'Townhouse')], max_length=50)),
                ('neighbor_emergency_name', models.CharField(max_length=100)),
                ('neighbor_emergency_contact', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('nature_ownership', models.CharField(choices=[('Govt', 'Govt'), ('Private', 'Private'), ('Govt/Private', 'Govt/Private'), ('Religious', 'Religious')], max_length=100)),
                ('building_description', models.CharField(choices=[('Security', 'Security'), ('Financial', 'Financial'), ('Accountancy', 'Accountancy'), ('Education', 'Education'), ('MMDA', 'MMDA'), ('Agri', 'Agri'), ('Consultancy', 'Consultancy'), ('Trading', 'Trading'), ('Other', 'Other')], max_length=100)),
                ('building_type', models.CharField(choices=[('Single-family home', 'Single-family home'), ('Apartment', 'Apartment'), ('Townhouse', 'Townhouse')], max_length=50)),
                ('land_size', models.CharField(choices=[('Single-family home', 'Single-family home'), ('Apartment', 'Apartment'), ('Townhouse', 'Townhouse')], max_length=50)),
                ('number_of_floors', models.PositiveIntegerField()),
                ('number_of_rooms', models.PositiveIntegerField()),
                ('toilet_facility', models.CharField(choices=[('In-house', 'In-house'), ('Public toilet', 'Public toilet'), ('Open defication', 'Open defication'), ('Flush', 'Flush'), ('Pit Latrine', 'Pit Latrine')], max_length=50)),
                ('parking_spaces', models.BooleanField(default=False)),
                ('fenced', models.BooleanField(default=False)),
                ('fencing_type', models.CharField(blank=True, choices=[('Wall Fenced', 'Wall Fenced'), ('Hedged', 'Hedged'), ('Non-Fenced', 'Non-Fenced')], max_length=50, null=True)),
                ('building_condition', models.CharField(choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Average', 'Average'), ('Poor', 'Poor')], max_length=50)),
                ('security_features', models.JSONField(default=list)),
                ('construction_material', models.CharField(choices=[('Concrete/bricks', 'Concrete/bricks'), ('Wood', 'Wood'), ('Metal', 'Metal')], max_length=50)),
                ('type_of_roof', models.CharField(choices=[('Metal Sheet', 'Metal Sheet'), ('Thatched', 'Thatched'), ('Concrete', 'Concrete')], max_length=50)),
                ('water_supply', models.CharField(choices=[('Piped/GWCL', 'Piped/GWCL'), ('Borehole', 'Borehole'), ('Well', 'Well'), ('Borehole', 'Borehole'), ('River', 'River'), ('N/A', 'N/A')], max_length=50)),
                ('gwcpl_supply', models.BooleanField(default=False)),
                ('electricity_connection', models.CharField(choices=[('National Grid', 'National Grid'), ('Solar', 'Solar'), ('N/A', 'N/A')], max_length=50)),
                ('ecg_connection', models.BooleanField(default=False)),
                ('ecg_pole_no', models.CharField(max_length=100)),
                ('has_backup_generator', models.BooleanField(default=False)),
                ('sewage_system', models.CharField(choices=[('Connected to the sewer', 'Connected to the sewer'), ('Septic tank', 'Septic tank'), ('open drainage', 'open drainage')], max_length=50)),
                ('waste_disposal_method', models.CharField(choices=[('Municipal collection', 'Municipal collection'), ('Burning', 'Burning'), ('Dumping', 'Dumping')], max_length=50)),
                ('internet_connectivity', models.CharField(choices=[('broadband', 'broadband'), ('Mobile', 'Mobile'), ('None', 'None')], max_length=50)),
                ('proximity_to_public_infrastructure', models.CharField(choices=[('Church', 'Church'), ('Schools', 'Schools'), ('Hospitals', 'Hospitals'), ('Markets', 'Markets')], max_length=50)),
                ('name_of_public_infr', models.CharField(max_length=50)),
                ('flood_risk_area', models.BooleanField(default=False)),
                ('criminal_activities_1', models.CharField(choices=[('Stealing', 'Stealing'), ('Assault', 'Assault'), ('Fraud', 'Fraud'), ('Theft', 'Theft'), ('Rape & Defilement', 'Rape & Defilement'), ('Robbery', 'Robbery')], max_length=50)),
                ('criminal_activities_2', models.CharField(choices=[('Stealing', 'Stealing'), ('Assault', 'Assault'), ('Fraud', 'Fraud'), ('Theft', 'Theft'), ('Rape & Defilement', 'Rape & Defilement'), ('Robbery', 'Robbery')], max_length=50)),
                ('criminal_activities_3', models.CharField(choices=[('Stealing', 'Stealing'), ('Assault', 'Assault'), ('Fraud', 'Fraud'), ('Theft', 'Theft'), ('Rape & Defilement', 'Rape & Defilement'), ('Robbery', 'Robbery')], max_length=50)),
                ('network_connectivity', models.CharField(choices=[('Strong', 'Strong'), ('Average', 'Average'), ('Weak', 'Weak'), ('No Network', 'No Network')], max_length=50)),
                ('road_network', models.BooleanField(default=False)),
                ('road_condition', models.CharField(blank=True, choices=[('Good', 'Good'), ('Fair', 'Fair'), ('Poor', 'Poor'), ('Paved', 'Paved'), ('Gravel', 'Gravel')], max_length=50, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('ghana_card', models.OneToOneField(help_text='Select a valid Ghana Card entry.', on_delete=django.db.models.deletion.CASCADE, related_name='residential_capture', to='accounts.datacapture')),
                ('mmda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.mmda')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.region')),
            ],
            options={
                'verbose_name': 'Residential Capture',
                'verbose_name_plural': 'Residential Captures',
                'ordering': ['-date_created', 'building_name'],
            },
        ),
        migrations.CreateModel(
            name='SMECapture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('category', models.CharField(default='SME', max_length=10)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('sme_name', models.CharField(max_length=100)),
                ('sme_contact', models.CharField(blank=True, max_length=100)),
                ('sme_admin', models.CharField(blank=True, max_length=100)),
                ('sme_admin_contact', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('additional_contacts', models.JSONField(default=list)),
                ('gps_address', models.CharField(max_length=100)),
                ('latitude', models.FloatField(help_text='Latitude must be between -90.0 and 90.0.', validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('longitude', models.FloatField(help_text='Longitude must be between -180.0 and 180.0.', validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('area_zone', models.CharField(choices=[('Zone_A', 'Zone A'), ('Zone_B', 'Zone B'), ('Zone_C', 'Zone C'), ('Zone_D', 'Zone D'), ('Urban', 'Urban'), ('Rural', 'Rural')], max_length=100)),
                ('street_name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('sme_registered', models.BooleanField(default=False)),
                ('registration_no', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Invalid registration number format.', regex='^[A-Za-z0-9\\-]+$')])),
                ('nature_ownership', models.CharField(choices=[('Govt', 'Govt'), ('Private', 'Private'), ('Govt/Private', 'Govt/Private'), ('Religious', 'Religious')], max_length=100)),
                ('service_type', models.CharField(choices=[('Security', 'Security'), ('Financial', 'Financial'), ('Accountancy', 'Accountancy'), ('Education', 'Education'), ('MMDA', 'MMDA'), ('Agri', 'Agri'), ('Consultancy', 'Consultancy'), ('Trading', 'Trading'), ('Other', 'Other')], max_length=100)),
                ('emergency_name', models.CharField(max_length=100)),
                ('emergency_contact', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('building_type', models.CharField(choices=[('Single-family home', 'Single-family home'), ('Apartment', 'Apartment'), ('Townhouse', 'Townhouse')], max_length=50)),
                ('number_of_floors', models.PositiveIntegerField()),
                ('toilet_facility', models.CharField(choices=[('In-house', 'In-house'), ('Public toilet', 'Public toilet'), ('Open defication', 'Open defication'), ('Flush', 'Flush'), ('Pit Latrine', 'Pit Latrine')], max_length=50)),
                ('parking_spaces', models.BooleanField(default=False)),
                ('fenced', models.BooleanField(default=False)),
                ('fencing_type', models.CharField(blank=True, choices=[('Wall Fenced', 'Wall Fenced'), ('Hedged', 'Hedged'), ('Non-Fenced', 'Non-Fenced')], max_length=50, null=True)),
                ('building_condition', models.CharField(choices=[('Excellent', 'Excellent'), ('Good', 'Good'), ('Average', 'Average'), ('Poor', 'Poor')], max_length=50)),
                ('security_features', models.JSONField(default=dict)),
                ('construction_material', models.CharField(choices=[('Concrete/bricks', 'Concrete/bricks'), ('Wood', 'Wood'), ('Metal', 'Metal')], max_length=50)),
                ('type_of_roof', models.CharField(choices=[('Metal Sheet', 'Metal Sheet'), ('Thatched', 'Thatched'), ('Concrete', 'Concrete')], max_length=50)),
                ('water_supply', models.CharField(choices=[('Piped/GWCL', 'Piped/GWCL'), ('Borehole', 'Borehole'), ('Well', 'Well'), ('Borehole', 'Borehole'), ('River', 'River'), ('N/A', 'N/A')], max_length=50)),
                ('gwcpl_supply', models.BooleanField(default=False)),
                ('electricity_connection', models.CharField(choices=[('National Grid', 'National Grid'), ('Solar', 'Solar'), ('N/A', 'N/A')], max_length=50)),
                ('has_backup_generator', models.BooleanField(default=False)),
                ('sewage_system', models.CharField(choices=[('Connected to the sewer', 'Connected to the sewer'), ('Septic tank', 'Septic tank'), ('open drainage', 'open drainage')], max_length=50)),
                ('waste_disposal_method', models.CharField(choices=[('Municipal collection', 'Municipal collection'), ('Burning', 'Burning'), ('Dumping', 'Dumping')], max_length=50)),
                ('internet_connectivity', models.CharField(choices=[('broadband', 'broadband'), ('Mobile', 'Mobile'), ('None', 'None')], max_length=50)),
                ('proximity_to_public_infrastructure', models.CharField(choices=[('Church', 'Church'), ('Schools', 'Schools'), ('Hospitals', 'Hospitals'), ('Markets', 'Markets')], max_length=50)),
                ('flood_risk_area', models.BooleanField(default=False)),
                ('criminal_activities', models.JSONField(default=list)),
                ('network_connectivity', models.CharField(choices=[('Strong', 'Strong'), ('Average', 'Average'), ('Weak', 'Weak'), ('No Network', 'No Network')], max_length=50)),
                ('road_network', models.BooleanField(default=False)),
                ('road_condition', models.CharField(blank=True, choices=[('Good', 'Good'), ('Fair', 'Fair'), ('Poor', 'Poor'), ('Paved', 'Paved'), ('Gravel', 'Gravel')], help_text='If road network exists, specify the condition of the road.', max_length=50, null=True)),
                ('profile_picture', models.ImageField(blank=True, default='default_profile.jpg', null=True, upload_to='profile_pictures/')),
                ('mmda', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.mmda')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.region')),
                ('sme_admin_ghana_card', models.OneToOneField(help_text='Select a valid Ghana Card entry.', on_delete=django.db.models.deletion.CASCADE, related_name='SME_capture', to='accounts.datacapture', to_field='ghana_card')),
            ],
            options={
                'verbose_name': 'SME Capture',
                'verbose_name_plural': 'SME Captures',
                'ordering': ['-date_created', 'sme_name'],
            },
        ),
        migrations.CreateModel(
            name='UserAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mmda', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.mmda')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.region')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='assignment', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
